1) Difference between fail-fast and fail-safe iterators?
  Fail-fast iterators throw ConcurrentModificationException exception during iteration. ConcurrentModificationException is thrown when one thread is itertaing over a collection
  and other thread tries to modify ,add,delete elements in same collection.
  Fail-safe iterators doesnt throw this exception as they iterate over a clone of a collection. So they require more memory also.
  

2) Why Map is not included in collection interface?
  Map stores a key value pair where as Collections only store objects.Also map uses put(K,V) method but Collections have only add(e) method.
  
3) Shadowing in Java?
  When we override methods, generally in dynamic binding method of object class is called. Eg A a=new B().method() and a method is overriden by B , so method of B will be called
  But when method is static then method of parent class will be called.
  
4) Exception Hierarchy ?

                                                                                Throwable
                                                                              /            \
                                                                      Exception               Error
                                                                       /    \                       |
                                                                      /      \                      StackOverFlowError,OutOfMemoryError
                                                                     /        \                
                                                                 Checked      Unchecked(Runtime)   
                                                                 |                            |
                                                                 IOException              NullPointer
                                                                 SQL Exception            IndexOutOfBoud
                                                                 ClassNotFound
                                                                 
                                                                 
